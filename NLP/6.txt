#6Implementing regularization to avoid over fitting in binary classification.
from matplotlib import pyplot as plt
from sklearn.datasets import make_moons
from keras.models import Sequential
from keras.layers import Dense
from keras.regularizers import l1_l2
print("30_vinayak")
x,y=make_moons(n_samples=100, noise=0.2,random_state=1)
n_train=30
trainx,testx=x[:n_train,:],x[n_train:]
trainy,testy=y[:n_train],y[n_train:]
model=Sequential()
model.add(Dense(500,input_dim=2,activation='relu',kernel_regularizer=l1_l2(l1=0.001,l2=0.001)))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
history=model.fit(trainx,trainy,validation_data=(testx,testy), epochs=1000)
plt.plot(history.history['val_accuracy'],label='test')
plt.legend()
plt.show()