/*
s6 : rite a solidity program to find sum of the array of 10 numbers taken
from the user and also find the AND operation of 1,3,5,7,9th no. of an
array and Or operation of even position no. and hence find the product
of the results and create a smart contract to find whether the product is
the part of product of an array or not

*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Q6 {
    

    uint256[] numbers;
   constructor(uint256[] memory _initialNumbers) {
        require(_initialNumbers.length == 10, "Initial numbers array must have 10 elements");
        numbers = _initialNumbers;
    }
    function isProductInArray() public view returns (bool) {
         uint256 sum = 0;
         uint256 andopp = numbers[0];
         uint256 oropp = numbers[1];
        for (uint256 i = 0; i < 10; i++) {
            sum += numbers[i];
            if((i+1)%2 == 0){ andopp &= numbers[i];}
            if((i+1)%2 != 0){ oropp |= numbers[i];}
        }
        uint256 product = andopp * oropp;
        uint256 arrayProduct = 1;
        for (uint256 i = 0; i < 10; i++) {
            if(numbers[i] == product){
                product = numbers[i];
            }
        }
        return product == arrayProduct;
    }
}
