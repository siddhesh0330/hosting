# 1d Create a blockchain, a genesis block and execute it.
import datetime
import hashlib
class Block:
 def __init__(self, previous_block_hash, data, timestamp):
  self.previous_block_hash = previous_block_hash
  self.data = data
  self.timestamp = timestamp
  self.hash = self.get_hash()
 def create_genesis_block():
  return Block("0", "0", datetime.datetime.now())
 def get_hash(self):
  header = (str(self.previous_block_hash)+str(self.data)+str(self.timestamp))
  inner_hash = hashlib.sha256(header.encode()).hexdigest().encode()
  comp_hash = hashlib.sha256(inner_hash).hexdigest()
  return comp_hash
# from dummyblock import Block

number_of_blocks = 21
Blockchain = [Block.create_genesis_block()]
print(' Genesis Block is Created')
print("Hash: %s" % Blockchain[0].hash)
for i in range(1, number_of_blocks):
 Blockchain.append(Block(Blockchain[i - 1].hash, "Block number %d" % i,
datetime.datetime.now()))
print("%d blocks created" % i)
print("Hash: %s" % Blockchain[-i].hash)

-----------------------------------------

# 1e Create a mining function and test it.
from hashlib import sha256
MAX_NONCE = 100000000000
def SHA256(text):
 return sha256(text.encode("ascii")).hexdigest()
def mine(block_number, transactions, previous_hash, prefix_zeros):
  prefix_str = '0'*prefix_zeros
  for nonce in range(MAX_NONCE):
    text = str(block_number)+transactions+previous_hash+str(nonce)
    new_hash = SHA256(text)
    if new_hash.startswith(prefix_str):
      print(f"Yay! Successfully mined bitcoins with nonce value:{nonce}")
      return new_hash
  raise BaseException(f"Couldn't find correct has after trying {MAX_NONCE}times")
if __name__ == '__main__':
 transactions ='''
 Dhaval->Bhavan->20,
 Mando->Cara->45
 '''
difficulty = 2 #trying changing this to highe number and you will see it will take more time for mininig as difficulty increases
import time
start = time.time()
print("Mining has started")
new_hash = mine(5,
transactions,'a34e0074f69db033348600edbe8139c96ecc389af7ff8483bc2d9f180c02754c', difficulty)
total_time = str((time.time() -start))
print(f"Mining Ended.Mining took: {total_time} seconds")
print(new_hash)

-----------------------------------------

# 1f Add blocks to the minor and dump the blockchain.

import datetime
import hashlib

class Block:
 blockNo = 0
 data = None
 next = None
 hash = None
 nonce = 0
 previous_hash = 0x0
 timestamp = datetime.datetime.now()
 def __init__(self, data):
  self.data = data
 def hash(self):
  h = hashlib.sha256()
  h.update(
  str(self.nonce).encode('utf-8') +
  str(self.data).encode('utf-8') +
  str(self.previous_hash).encode('utf-8') +
  str(self.timestamp).encode('utf-8') +
  str(self.blockNo).encode('utf-8')
  )
  return h.hexdigest()
  def __str__(self):
    return "Block Hash: " + str(self.hash()) + "\nBlock No: " + str(self.blockNo) + "\nBlock Data: " + str(self.data) + "\nHashes: " + str(self.nonce) + "\n-----------------------------------------------------------"
class Blockchain:
 diff = 20
 maxNonce = 2 ** 32
 target = 2 ** (256 - diff)
 block = Block("Genesis")
 dummy = head = block
 def add(self, block):
  block.previous_hash = self.block.hash()
  block.blockNo = self.block.blockNo + 1
  self.block.next = block
  self.block = self.block.next
 def mine(self, block):
  for n in range(self.maxNonce):
    if int(block.hash(), 16) <= self.target:
      self.add(block)
      print(block)
      break
    else:
      block.nonce += 1
blockchain = Blockchain()
for n in range(10):
 blockchain.mine(Block("Block " + str(n + 1)))
while blockchain.head is not None:
 print(blockchain.head)
 blockchain.head = blockchain.head.next
