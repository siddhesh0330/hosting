//SPDX-License-Identifier: GPL-3.0

// 3 : Operators (Logical, Assignment, Bitwise, Ternary, Comparison)
pragma solidity >=0.8.2 <0.9.0;
contract operators{
 uint256 num1;
 uint256 num2;
 uint256 and;
 uint256 or;
 bool logicaland;
 bool logicalor;
 function store1(uint256 a) public{
 num1=a;
}
function store2(uint256 b) public{
 num2=b;
 and=num1&num2;
 or=num1|num2;
 logicaland=num1 >6 && num2 <3;
 logicalor=num1 >4 || num2 <3;
}
function BitwiseAND()public view returns (uint256){
 return and;
}
function BitwiseOR()public view returns (uint256){
 return or;
}
function LogicalAND()public view returns (bool){
 return logicaland;
}
function LogicalOR()public view returns (bool){
 return logicalor;
}
 function equals(uint256 a, uint256 b) public pure returns (uint256) {
 a=b;
 return a ;
 }
 function isNotEqual(uint256 a, uint256 b) public pure returns (bool) {
 return a != b;
 }
 function isGreater(uint256 a, uint256 b) public pure returns (bool) {
 return a > b;
 }
 function isLesser(uint256 a, uint256 b) public pure returns (bool) {
 return a < b;
 }
 function isLessThanEqual(uint256 a, uint256 b) public pure returns (bool) {
 return a <= b;
 }
 function isGreaterThanEqual(uint256 a, uint256 b) public pure returns (bool) {
 return a >= b;
 }
function ternary(uint256 a, uint256 b) public pure returns (uint256) {
 return a>b ? a: b ;
 }
}