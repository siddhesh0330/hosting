/*
s9 : Write a solidarity program to find whether a number is even or odd
and another number is prime or composite and hence find the bit vise
AND and bit vise OR of the results of product of the 2 numbers and if
the result is even then allow the student else denied.
*/


// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract NumberChecker {
    // Function to check if a number is even
    function isEven(uint256 number) internal pure returns (bool) {
        return number % 2 == 0;
    }

    // Function to check if a number is prime
    function isPrime(uint256 number) internal pure returns (bool) {
        if (number <= 1) {
            return false;
        }
        for (uint256 i = 2; i * i <= number; i++) {
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }


    // Function to determine if the student is allowed based on the provided numbers
    function allowStudent(uint256 number1, uint256 number2) public pure returns (bool) {
        bool isNumber1Even = isEven(number1); 
        bool isNumber2Prime = isPrime(number2); 
        uint256 resultAND = number1 & number2; 
        uint256 resultOR = number1 | number2; 
        uint256 multipliedResult = resultAND * resultOR; 
        bool isResultEven = isEven(multipliedResult); 
        if (isResultEven) {
            return true; 
        } else {
            return false; 
        }
    }
}
