#2 Solving XOR problem using deep feed forward network

import numpy as np
import tensorflow as tf
from keras.layers import Dense
from keras.models import Sequential
model=tf.keras.models.Sequential()
model.add(tf.keras.layers.Dense(units=2,activation='relu',input_dim=2))
model.add(tf.keras.layers.Dense(units=1,activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer='adam', metrics=['accuracy'])
print(model.summary())
print(model.get_weights())
x=np.array([[0.,0.],[0.,1.],[1.,0.],[1.,1.]])
Y=np.array([0.,1.,1.,0.])
model.fit(x,Y,epochs=50,batch_size=4,verbose=0)
print(model.get_weights())
print(model.predict(x,batch_size=4))